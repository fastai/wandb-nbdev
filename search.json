[
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Getting Started",
    "section": "",
    "text": "Getting started with experiment tracking? Try the ​Quickstart​ ->"
  },
  {
    "objectID": "intro.html#guides",
    "href": "intro.html#guides",
    "title": "Getting Started",
    "section": "Guides",
    "text": "Guides\n\nExperiment Tracking​: Visualize experiments in real time\nHyperparameter Tuning​: Optimize models quickly\nCollaborative Reports​: Describe and share findings\nData + Model Versioning​: Version datasets and models ​5. Data Visualization: Visualize predictions across model versions\nIntegrations: PyTorch, Keras, Hugging Face, and more\nPrivate-Hosting​: Private cloud and local hosting of the W&B app"
  },
  {
    "objectID": "intro.html#reference",
    "href": "intro.html#reference",
    "title": "Getting Started",
    "section": "Reference",
    "text": "Reference\n\nPython Library\nCommand Line Interface\nApp UI ​​"
  },
  {
    "objectID": "walkthrough.html",
    "href": "walkthrough.html",
    "title": "Model Management Walkthrough",
    "section": "",
    "text": "In this walkthrough you’ll learn how to use Weights & Biases for Model Management. Track, visualize, and report on the complete production model workflow.\nWe are actively building new Model Management features. Please reach out with questions or suggestions at support@wandb.com.\nNow we will walk through a canonical workflow for producing, organizing, and consuming trained models:\nA companion colab notebook is provided which covers step 2-3 in the first code block and steps 4-6 in the second code block."
  },
  {
    "objectID": "walkthrough.html#create-a-new-registered-model",
    "href": "walkthrough.html#create-a-new-registered-model",
    "title": "Model Management Walkthrough",
    "section": "1. Create a new Registered Model",
    "text": "1. Create a new Registered Model\nFirst, create a Registered Model to hold all the candidate models for your particular modeling task. In this tutorial, we will use the classic MNIST Dataset - 28x28 grayscale input images with output classes from 0-9. The video below demonstrates how to create a new Registered Model.\n\nUsing Model RegistryUsing Artifact Browser\n\n\n\nVisit your Model Registry at wandb.ai/registry/model (linked from homepage).\n\n\n\n\nClick the Create Registered Model button at the top of the Model Registry.\n\n\n\nMake sure the Owning Entity and Owning Project are set correctly to the values you desire. Enter a unique name for your new Registered Model that describes the modeling task or use-case of interest.\n\n\n\n\n\nVisit your Project’s Artifact Browser: wandb.ai/<entity>/<project>/artifacts\nClick the + icon on the bottom of the Artifact Browser Sidebar\nSelect Type: model, Style: Collection, and enter a name. In our case MNIST Grayscale 28x28. Remember, a Collection should map to a modeling task - enter a unique name that describes the use case."
  },
  {
    "objectID": "walkthrough.html#train-log-model-versions",
    "href": "walkthrough.html#train-log-model-versions",
    "title": "Model Management Walkthrough",
    "section": "2. Train & log Model Versions",
    "text": "2. Train & log Model Versions\nNext, you will log a model from your training script:\n\n(Optional) Declare your dataset as a dependency so that it is tracked for reproducibility and audibility\nSerialize your model to disk periodically (and/or at the end of training) using the serialization process provided by your modeling library (eg PyTorch & Keras).\nAdd your model files to an Artifact of type “model”\n\nNote: We use the name f'mnist-nn-{wandb.run.id}'. While not required, it is advisable to name-space your “draft” Artifacts with the Run id in order to stay organized\n\n(Optional) Log training metrics associated with the performance of your model during training.\n\nNote: The data logged immediately before logging your Model Version will automatically be associated with that version\n\nLog your model\n\nNote: If you are logging multiple versions, it is advisable to add an alias of “best” to your Model Version when it outperforms the prior versions. This will make it easy to find the model with peak performance - especially when the tail end of training may overfit!\n\n\nBy default, you should use the native W&B Artifacts API to log your serialized model. However, since this pattern is so common, we have provided a single method which combines serialization, Artifact creation, and logging. See the “(Beta) Using log_model” tab for details.\n\nUsing Artifacts(Beta) Using log_modelDeclare Dataset Dependency\n\n\nimport wandb\n\n# Always initialize a W&B run to start tracking\nwandb.init()\n\n# (Optional) Declare an upstream dataset dependency\n# see the `Declare Dataset Dependency` tab for\n# alternative examples.\ndataset = wandb.use_artifact(\"mnist:latest\")\n\n# At the end of every epoch (or at the end of your script)...\n# ... Serialize your model\nmodel.save(\"path/to/model.pt\")\n# ... Create a Model Version\nart = wandb.Artifact(f'mnist-nn-{wandb.run.id}', type=\"model\")\n# ... Add the serialized files\nart.add_file(\"path/to/model.pt\", \"model.pt\")\n# (optional) Log training metrics\nwandb.log({\"train_loss\": 0.345, \"val_loss\": 0.456})\n# ... Log the Version\nif model_is_best:\n    # If the model is the best model so far, add \"best\" to the aliases\n    wandb.log_artifact(art, aliases=[\"latest\", \"best\"])\nelse:\n    wandb.log_artifact(art)\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe following code snippet leverages actively developed beta APIs and therefore is subject to change and not guaranteed to be backwards compatible.\n\n\nfrom wandb.beta.workflows import log_model\n\n# (Optional) Declare an upstream dataset dependency\n# see the `Declare Dataset Dependency` tab for\n# alternative examples.\ndataset = wandb.use_artifact(\"mnist:latest\")\n\n# (optional) Log training metrics\nwandb.log({\"train_loss\": 0.345, \"val_loss\": 0.456})\n\n# This one method will serialize the model, start a run, create a version\n# add the files to the version, and log the version. You can override\n# the default name, project, aliases, metadata, and more!\nlog_model(model, \"mnist-nn\", aliases=[\"best\"] if model_is_best else [])\nNote: you may want to define custom serialization and deserialization strategies. You can do so by subclassing the _SavedModel class, similar to the _PytorchSavedModel class. All subclasses will automatically be loaded into the serialization registry. As this is a beta feature, please reach out to support@wandb.com with questions or comments.\n\n\nIf you would like to track your training data, you can declare a dependency by calling wandb.use_artifact on your dataset. Here are 3 examples of how you can declare a dataset dependency:\nDataset stored in W&B\ndataset = wandb.use_artifact(\"[[entity/]project/]name:alias\")\nDataset stored on Local Filesystem\nart = wandb.Artifact(\"dataset_name\", \"dataset\")\nart.add_dir(\"path/to/data\") # or art.add_file(\"path/to/data.csv\")\ndataset = wandb.use_artifact(art)\nDataset stored on Remote Bucket\nart = wandb.Artifact(\"dataset_name\", \"dataset\")\nart.add_reference(\"s3://path/to/data\")\ndataset = wandb.use_artifact(art)\n\n\n\nAfter logging 1 or more Model Versions, you will notice that your will have a new Model Artifact in your Artifact Browser. Here, we can see the results of logging 5 versions to an artifact named mnist_nn-1r9jjogr.\n\nIf you are following along the example notebook, you should see a Run Workspace with charts similar to the image below"
  },
  {
    "objectID": "walkthrough.html#link-model-versions-to-the-registered-model",
    "href": "walkthrough.html#link-model-versions-to-the-registered-model",
    "title": "Model Management Walkthrough",
    "section": "3. Link Model Versions to the Registered Model",
    "text": "3. Link Model Versions to the Registered Model\nNow, let’s say that we are ready to link one of our Model Versions to the Registered Model. We can accomplish this manually as well as via an API.\n\nManual LinkingProgramatic Linking(Beta) Using link_model\n\n\nThe following video below demonstrates how to manually link a Model Version to your newly created Registered Model:\n\nNavigate to the Model Version of interest\nClick the link icon\nSelect the target Registered Model\n(optional): Add additional aliases\n\n\n\n\nWhile manual linking is useful for one-off Models, it is often useful to programmatically link Model Versions to a Collection - consider a nightly job or CI pipeline that wants to link the best Model Version from every training job. Depending on your context and use case, you may use one of 3 different linking APIs:\nFetch Model Artifact from Public API:\nimport wandb\n\n# Fetch the Model Version via API\nart = wandb.Api().artifact(...)\n\n# Link the Model Version to the Model Collection\nart.link(\"[[entity/]project/]collectionName\")\nModel Artifact is “used” by the current Run:\nimport wandb\n\n# Initialize a W&B run to start tracking\nwandb.init()\n\n# Obtain a reference to a Model Version\nart = wandb.use_artifact(...)\n\n# Link the Model Version to the Model Collection\nart.link(\"[[entity/]project/]collectionName\")\nModel Artifact is logged by the current Run:\nimport wandb\n\n# Initialize a W&B run to start tracking\nwandb.init()\n\n# Create an Model Version\nart = wandb.Artifact(...)\n\n# Log the Model Version\nwandb.log_artifact(art)\n\n# Link the Model Version to the Collection\nwandb.run.link_artifact(art, \"[[entity/]project/]collectionName\")\n\n\nThe following code snippet leverages actively developed beta APIs and therefore is subject to change and not guaranteed to be backwards compatible.\nIn the case that you logged a model with the beta log_model discussed above, then you can use it’s companion method: link_model\nfrom wandb.beta.workflows import log_model, link_model\n\n# Obtain a Model Version\nmodel_version = wb.log_model(model, \"mnist_nn\")\n\n# Link the Model Version\nlink_model(model_version, \"[[entity/]project/]collectionName\")\nAfter you link the Model Version, you will see hyperlinks connecting the Version in the Registered Model to the source Artifact and visa versa."
  },
  {
    "objectID": "walkthrough.html#use-a-model-version",
    "href": "walkthrough.html#use-a-model-version",
    "title": "Model Management Walkthrough",
    "section": "4. Use a Model Version",
    "text": "4. Use a Model Version\nNow we are ready to consume a Model - perhaps to evaluate its performance, make predictions against a dataset, or use in a live production context. Similar to logging a Model, you may choose to use the raw Artifact API or the more opinionated beta APIs.\n\nUsing Artifacts(Beta) Using use_model\n\n\nYou can load in a Model Version using the use_artifact method.\nimport wandb\n\n# Always initialize a W&B run to start tracking\nwandb.init()\n\n# Download your Model Version files\npath = wandb.use_artifact(\"[[entity/]project/]collectionName:latest\").download()\n\n# Deserialize your model (this will be your custom code to load in\n# a model from disk - reversing the serialization process used in step 2)\nmodel = make_model_from_data(path)\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe following code snippet leverages actively developed beta APIs and therefore is subject to change and not guaranteed to be backwards compatible.\n\n\nDirectly manipulating model files and handling deserialization can be tricky - especially if you were not the one who serialized the model. As a companion to log_model, use_model automatically deserializes and reconstructs your model for use.\nfrom wandb.beta.workflows import use_model\n\nmodel = use_model(\"[[entity/]project/]collectionName\").model_obj()"
  },
  {
    "objectID": "walkthrough.html#evaluate-model-performance",
    "href": "walkthrough.html#evaluate-model-performance",
    "title": "Model Management Walkthrough",
    "section": "5. Evaluate Model Performance",
    "text": "5. Evaluate Model Performance\nAfter training many Models, you will likely want to evaluate the performance of those models. In most circumstances you will have some held-out data which serves as a test dataset, independent of the dataset your models have access to during training. To evaluate a Model Version, you will want to first complete step 4 above to load a model into memory. Then:\n\n(Optional) Declare a data dependency to your evaluation data\nLog metrics, media, tables, and anything else useful for evaluation\n\n# ... continuation from 4\n\n# (Optional) Declare an upstream evaluation dataset dependency\ndataset = wandb.use_artifact(\"mnist-evaluation:latest\")\n\n# Evaluate your model in whatever way makes sense for your\nloss, accuracy, predictions = evaluate_model(model, dataset)\n\n# Log out metrics, images, tables, or any data useful for evaluation.\nwandb.log({\"loss\": loss, \"accuracy\": accuracy, \"predictions\": predictions})\nIf you are executing similar code, as demonstrated in the notebook, you should see a workspace similar to the image below - here we even show model predictions against the test data!"
  },
  {
    "objectID": "walkthrough.html#promote-a-version-to-production",
    "href": "walkthrough.html#promote-a-version-to-production",
    "title": "Model Management Walkthrough",
    "section": "6. Promote a Version to Production",
    "text": "6. Promote a Version to Production\nNext, you will likely want to denote which version in the Registered Model is intended to be used for Production. Here, we use the concept of aliases. Each Registered Model can have any aliases which make sense for your use case - however we often see production as the most common alias. Each alias can only be assigned to a single Version at a time.\n\nvia UI Interfacevia API\n\n\n\n\n\nFollow steps in Part 3. Link Model Versions to the Collection and add the aliases you want to the aliases parameter.\nThe image below shows the new production alias added to v1 of the Registered Model!"
  },
  {
    "objectID": "walkthrough.html#consume-the-production-model",
    "href": "walkthrough.html#consume-the-production-model",
    "title": "Model Management Walkthrough",
    "section": "7. Consume the Production Model",
    "text": "7. Consume the Production Model\nFinally, you will likely want to use your production Model for inference. To do so, simply follow the steps outlined in Part 4. Using a Model Version, with the production alias. For example:\nwandb.use_artifact(\"[[entity/]project/]registeredModelName:production\")\nYou can reference a Version within the Registered Model using different alias strategies:\n\nlatest - which will fetch the most recently linked Version\nv# - using v0, v1, v2, … you can fetch a specific version in the Registered Model\nproduction - you can use any custom alias that you and your team have assigned"
  },
  {
    "objectID": "walkthrough.html#build-a-reporting-dashboard",
    "href": "walkthrough.html#build-a-reporting-dashboard",
    "title": "Model Management Walkthrough",
    "section": "8. Build a Reporting Dashboard",
    "text": "8. Build a Reporting Dashboard\nUsing Weave Panels, you can display any of the Model Registry/Artifact views inside of Reports! See a demo here. Below is a full-page screenshot of an example Model Dashboard."
  },
  {
    "objectID": "init.html",
    "href": "init.html",
    "title": "Launch Experiments with wandb.init",
    "section": "",
    "text": "Call wandb.init() at the top of your script to start a new run\nCall wandb.init() once at the beginning of your script to initialize a new job. This creates a new run in W&B and launches a background process to sync data."
  },
  {
    "objectID": "init.html#reference-documentation",
    "href": "init.html#reference-documentation",
    "title": "Launch Experiments with wandb.init",
    "section": "Reference Documentation",
    "text": "Reference Documentation\nView the reference docs for this function, generated from the wandb Python library."
  },
  {
    "objectID": "init.html#common-questions",
    "href": "init.html#common-questions",
    "title": "Launch Experiments with wandb.init",
    "section": "Common Questions",
    "text": "Common Questions\n\nHow do I launch multiple runs from one script?\nIf you’re trying to start multiple runs from one script, add two things to your code:\n\nrun = wandb.init(reinit=True): Use this setting to allow reinitializing runs\nrun.finish(): Use this at the end of your run to finish logging for that run\n\n\nimport wandb\nfor x in range(2):\n    run = wandb.init(reinit=True)\n    for y in range (25):\n        wandb.log({\"metric\": x+y})\n    run.finish()\n\nAlternatively you can use a python context manager which will automatically finish logging:\n\nimport wandb\nfor x in range(2):\n    run = wandb.init(reinit=True)\n    with run:\n        for y in range(25):\n            run.log({\"metric\": x+y})"
  },
  {
    "objectID": "init.html#how-do-i-programmatically-access-the-human-readable-run-name",
    "href": "init.html#how-do-i-programmatically-access-the-human-readable-run-name",
    "title": "Launch Experiments with wandb.init",
    "section": "How do I programmatically access the human-readable run name?",
    "text": "How do I programmatically access the human-readable run name?\nIt’s available as the .name attribute of a wandb.Run.\n\nimport wandb\nwandb.init();\nrun_name = wandb.run.name\n\n\nprint(run_name)\n\nsweet-sun-46"
  },
  {
    "objectID": "init.html#can-i-just-set-the-run-name-to-the-run-id",
    "href": "init.html#can-i-just-set-the-run-name-to-the-run-id",
    "title": "Launch Experiments with wandb.init",
    "section": "Can I just set the run name to the run ID?",
    "text": "Can I just set the run name to the run ID?\nIf you’d like to overwrite the run name (like snowy-owl-10) with the run ID (like qvlp96vk) you can use this snippet:\n\nimport wandb\nwandb.init();\nwandb.run.name = wandb.run.id\nwandb.run.save()\n\n\nprint(wandb.run.name)\n\n16ej8478"
  },
  {
    "objectID": "init.html#is-it-possible-to-save-metrics-offline-and-sync-them-to-wb-later",
    "href": "init.html#is-it-possible-to-save-metrics-offline-and-sync-them-to-wb-later",
    "title": "Launch Experiments with wandb.init",
    "section": "Is it possible to save metrics offline and sync them to W&B later?",
    "text": "Is it possible to save metrics offline and sync them to W&B later?\nBy default, wandb.init starts a process that syncs metrics in real time to our cloud hosted app. If your machine is offline, you don’t have internet access, or you just want to hold off on the upload, here’s how to run wandb in offline mode and sync later. You’ll need to set two environment variables.\n\nWANDB_API_KEY=$KEY, where $KEY is the API Key from your settings page\nWANDB_MODE=\"offline\"\n\nAnd here’s a sample of what this would look like in your script:\n\n\n\nimport wandb\nimport os\nos.environ[\"WANDB_MODE\"] = \"offline\"\nconfig = {\n  \"dataset\": \"CIFAR10\",\n  \"machine\": \"offline cluster\",\n  \"model\": \"CNN\",\n  \"learning_rate\": 0.01,\n  \"batch_size\": 128,\n}\nwandb.init(project=\"offline-demo\")\nfor i in range(100):\n  wandb.log({\"accuracy\": i})\n\n\n\n\nHere’s a sample terminal output:\n\npython offline.py\n\nwandb: Tracking run with wandb version 0.13.1\nwandb: W&B syncing is set to `offline` in this directory.  \nwandb: Run `wandb online` or set WANDB_MODE=online to enable cloud syncing.\nwandb: Waiting for W&B process to finish... (success).\nwandb:                                                                                \nwandb: \nwandb: Run history:\nwandb: accuracy ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▇▇▇▇▇▇███\nwandb: \nwandb: Run summary:\nwandb: accuracy 99\nwandb: \nwandb: You can sync this run to the cloud by running:\nwandb: wandb sync /Users/hamel/wandb-nbdev/docs/wandb/offline-run-20220819_111619-1kj5i84c\nwandb: Find logs at: ./wandb/offline-run-20220819_111619-1kj5i84c/logs\n\n\nAnd once you’re ready, just run a sync command to send that folder to the cloud with the following command:\nwandb sync wandb/dryrun-folder-name\n\n!wandb sync wandb/latest-run\n\nFind logs at: /Users/hamel/wandb-nbdev/docs/wandb/debug-cli.hamel.log\nSyncing: https://wandb.ai/github-wandb/offline-demo/runs/1kj5i84c ... done."
  }
]